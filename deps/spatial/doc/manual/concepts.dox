/**
\page usermanual_concept Concepts
- \subpage linkmode_concept
- \subpage trivial_comparison_concept
- \subpage generalized_comparison_concept
- \subpage region_predicate_concept
- \subpage metric_concept
- \subpage difference_concept

This chapter provides a definition of all concepts in this book.
*/

/**
\page linkmode_concept Link Mode

A Link Mode defines the relationship between a node and the links that bear
the node. It provides all necessary informations in order to get from the
node to the link, and to access the key and value information contained in
the link.

The important concept to understand is that the link is the type that
aggregates the key, the value and the node. A tree is composed of a series
of nodes all tied to their key and values through the link type.

There are multiple types of link in the library. Sometimes, the link derives
from the node and the key and values are attributes. Other times, the
value type is the link itself, and it contains the node as an
attribute. This diversity explains why, in the tree algorithm, only the node
is being used, and the key, the value or the link are only retreived on
demand.

The models of LinkMode shall publicly provide the following interface:
\concept_tab
\concept_leg T \concept_des A model of Link Mode
\concept_req typename T::link_type;
\concept_des The link type which should be defined as Link.
\concept_req typename T::key_type;
\concept_des The key type in the link.
\concept_req typename T::value_type;
\concept_des The value type in the link.
\concept_req typename T::link_ptr
\concept_des A pointer to a mutable value of \c T::link_type.
\concept_req typename T::const_link_ptr
\concept_des A pointer to a contant value of \c T::link_type.
\concept_req typename T::node_ptr
\concept_des An alias to the type of \c Node<T>::ptr.
\concept_req typename T::const_node_ptr
\concept_des An alias to the type of \c Node<T>::const_ptr.
\concept_req T::key_type& key(Node<T>&);
\concept_des A function to return a \c T::key_type reference from a node
must exists.
\concept_req const T::key_type& const key(const Node<T>&);
\concept_des A function to return a const \c T::key_type reference from a
constant node must exists.
\concept_req T::value_type& value(Node<T>&);
\concept_des A function to return a \c T::value_type reference from a node
must exists.
\concept_req const T::value_type& value(const Node<T>&);
\concept_des A function to return a const \c T::value_type reference from a
constant node must exists.
\concept_req T::link_type& link(Node<T>&);
\concept_des A function to return a \c T::link_type from a node must exists.
\concept_req const T::link_type& link(const Node<T>&);
\concept_des A function to return a \c const \c T::link_type from a constant
node must exists.
\concept_req void swap(Node<T>&, Node<T>&);
\concept_des A function to swap two instances of \c T::link_type must
exists.
\concept_end

This level of abstraction allows the same algorithms to be used for regular
and intrusive containers, without loss of performance and without the use of
an otherwise cumbersome syntax.
*/

/**
\page trivial_comparison_concept Trivial Comparison

This concept defines the model for a functor class used to perform
strict comparison between two values of a spatial container, over a
single dimension. The functor shall return a boolean value equal true
if the first value is strictly lower than the second value over that
dimension.

The models of trivial comparison shall publicly provide the following
interface:
\concept_tab
\concept_leg T
\concept_des A model of Trivial Comparison
\concept_leg V
\concept_des The key used a spatial container.
\concept_req bool T::operator()(spatial::dimension_type x, const V& a,
const V&b) const
\concept_des Returns true if <tt>a < b</tt> over dimension \c d.
\concept_end

Models of this concept are required for comparison functors in \point_multiset,
\idle_point_multiset and other point containers. However, this model is not suitable
for Comparison functors in \box_multiset, \box_multimap, and other box
containers. For these container, look at \generalized_compare.
*/

/**
\page generalized_comparison_concept Generalized Comparison

Generalized comparison concept defines the model for a functor used to perform a
strict comparison between two values of a spatial container, over the same or a
different dimension. The functor shall return a boolean value equal true if the
first value is strictly lower than the second value over that dimension.

All models of Generalized Comparison shall also model \trivial_compare and
publicly provide the following interface:
\concept_tab
\concept_leg T
\concept_des A model of Generalized Comparison and \trivial_compare.
\concept_leg V
\concept_des The key used in a spatial container.
\concept_req bool T::operator()(spatial::dimension_type x, const V& a,
const V&b) const
\concept_des Returns true if <tt>a < b</tt> over dimension \c d. (inherited from
\trivial_compare.)
\concept_req bool T::operator()(spatial::dimension_type x, const V& a,
spatial::dimension_type y, const V&b) const
\concept_des Returns true if <tt>a(x) < b(y)</tt> where \c a(x) is the value
of \c a over dimension \c x and \c b(y) is the value of \c b over dimension
\c y.
\concept_end

When comparing boxes during tree traversal for overlap or enclose regions,
the library often need to compare the lower bound of a box against the
higher bound of a box over a particular axis. Since lower bounds and higher
bounds are stored on different dimensions in the library, the functor need
to be able to perform comparison on different dimension.

As you can guess, models of this concept are required for comparison
functors in \box_multiset, \idle_box_multiset, and other box containers.
*/

/**
\page region_predicate_concept Region Predicate

This concept defines the requirements for a predicate to be used in region
queries. Region queries are used for orthogonal searches in sets of point and
overlaping or enclosing orthogonal searches in set of boxes. The models of
RegionPredicate are used to match points and boxes in the spatial containers
against predefined intervals along each dimensions.

The models of region predicate shall publicly provide the following
interfaces:
\concept_tab
\concept_leg P
\concept_des A model of Region Predicate
\concept_leg V
\concept_des The key of a spatial container. E.g. in
\concept_req spatial::relative_order P::operator()(spatial::dimension_type
dim, const V& key, spatial::dimension_type rank) const
\concept_des Returns \c spatial::below if \c key is below the interval
considered along \c dim; \c spatial::above if \c key is above the interval
being considered along \c dim; \c spatial::matching if \c key matches the
interval being considered along \c dim. For a more complete explanation read
the detailed description.
\concept_end

The definition of a region predicate functor is generally not required.
Before you define such predicate, consider using \ref spatial::bounds, \ref
spatial::open_bounds, \ref spatial::closed_bounds, \ref spatial::overlap_bounds,
or \ref spatial::enclosed_bounds.

A model of region predicate generally represents a multi-dimension continuous
interval which is going to be used for orthogonal search. In order to
provide a generic model of iteration over an interval, \Spatial provides a
tribool value \ref spatial::relative_order to represent whether any value of the
container is situated above, below or in the interval, for a given
dimension.

For example, if you are storing integers in 1 dimension, and are interested
in finding all values between 0 and 10 included, you could write the
following predicate:

\code
struct MySimplePredicate
{
  spatial::relative_order
  operator()(dimension_type, const int& key, dimension_type)
  {
    return key < 0 ? spatial::below
      : ( key > 10 ? spatial::above : spatial::matching );
  }
};
\endcode

In this very simple example, there is no more than one dimension being
considered, so the first and last parameters are not used. As can be seen from
the implementation of the predicate, any value between 0 and 10 included would
result in the return value equal to spatial::matching. If the value of \c key is
less than 0, the lower bound of the interval, then the return value is equal to
spatial::below. If the value of \c key is more than 10, the return value is
spatial::above.

There are several limitation, by design, for a model a \region_predicate:

\li Comparison are made along the axes of your space, you can't compare keys
against a complicated polygon or a circle: i.e. for an euclidian space of rank
2, then the shape of the interval will be a box.

\li The interval of comparison must be continuous. There cannot be "holes" in in
the interval. If you \b must have a non-continuous predicate with, you have no
choice but to split this predicate in several different predicate which have no
holes, and make separated queries.

Let's look at a more complex example, probably closer to reality. This
predicate will work on any key that is a \c std::vector<double>, and
matches only values that are within the slice [-1, 1] of the highest
dimension:

\code
struct HigherSlice
{
  typedef std::vector<double> key_type;

  spatial::relative_order
  operator()(dimension_type dim, const key_type& key, dimension_type rank)
  {
    return rank - 1 == dim
      ? (key[dim] < -1.0 ? spatial::below
         : (key[dim] > 1.0 ? spatial::above : spatial::matching))
      : spatial::matching;
  }
};
\endcode

The value of \c rank is equal to the rank of the container used for the
orthogonal search. The value of \c dim is the current dimension being
considered. It is always in the interval <tt>[0, rank)</tt>.

More examples of predicates can be found in the example and the tutorial.
*/

/**
\page metric_concept Metric

This concept defines the requirements for a Metric to be used with
\neighbor_iterator. \neighbor_iterator provide iterative nearest neighbor
search algorithms on the container. Initializing the iterator to its begining
makes it stop at the nearest neighbor of the given point of origin. In order for
the \neighbor_iterator to compute distances, a Metric type must be provided.

The models of Metric shall publicly provide the following
interfaces:
\concept_tab
\concept_leg P
\concept_des A type that is a model of Metric
\concept_leg V
\concept_des A type that is the key of the spatial container.
\concept_leg D
\concept_des A type that is the distance used for calculation. \c D must have
the same interface as arithmetic types (it must be comparable, it must support
addition, substraction, multiplication, division, etc).
\concept_req typedef D distance_type
\concept_des The type used to express the distance between 2 element of the
container.
\concept_req distance_type A::distance_to_key(dimension_type rank,
const V& origin, const V& key) const
\concept_des Compute the distance between \c origin and \c key in a space of
dimension \c rank.
\concept_req distance_type A::distance_to_plane(dimension_type rank,
dimension_type dim, const V& origin, const V& key) const
\concept_des Compute the distance between \c key and the plane orthogonal to
the axis along dimension \c dim and containing \c origin, in a space of
dimension \c rank.
\concept_end

The purpose of the Metric itself is to represent the metric space in which the
metric calculation in between elements of the container take place.  With this
concept you have the freedom to create any metric space that is a continous
space topology. And so, it is possible to write a Metric where calculations for
\c distance_to_key and \c distance_to_plane take place in a Manifold, and not
just a regular Euclidean space.

If you were to write a Metric on your own, you would start from the stub
below, that is following the interface of this concept:

\code
struct MyMetric
{
  typedef my_distance_type distance_type;     // [1]

  distance_type
  distance_to_key(dimension_type rank,
  const Key& origin, const Key& key) const;   // [2]&[4]

  distance_type
  distance_to_plane(dimension_type rank, dimension_type dim,
  const Key& origin, const Key& key) const;   // [3]&[4]
};
\endcode

The details of the \c MyMetric type are as follow:

\li [1] is the definition of the type used for the computation of the
distance, often defined as double.

\li [2] is the general understanding of a \c distance: the quantity
that separates two points \c origin and \c key in the current metric
space.

\li [3] represents the shortest possible distance between a point named
\c origin and the plane that is orthogonal to the axis along the
dimension \c dim and that contains the point \c key. While this may seem
difficult to understand, in euclidian space, this operation is
equivalent to computing the difference in coordinates of \c origin and
\c key along the dimension \c dim.

\li [4] for any 2 points \c origin and \c key, [3] must always return a
result that is lower or equal to [2], regardless of the dimension being
considered. If rule [4] is not enforced in the metric (For example, due to
errors in approximations during the calculation), then the
iterator would not work properly and would skip some items in the
container. When writing Metrics for Manifolds or Riemanean spaces,
you must pay special attention to this rule, since the shortest distance
between the key and the plane is not always easy to represent mentally.

\Spatial provides ready-made models of Metric such as \euclidian,
\quadrance and \manhattan.
*/

/**
\page difference_concept Difference

This concept defines the requirements for objects to be used in nearest neighbor
queries with the library's built-in metrics such as \euclidian, \quadrance or
\manhattan. The models of Difference are used to calculate the difference
between 2 keys along the same dimension. That difference is expressed in a \c
Unit chosen by the user. Very often, the difference consist in a simple
substraction of the coordinates of 2 keys along the dimenion specified.

The models of Difference shall publicly provide the following
interfaces:
\concept_tab
\concept_leg D
\concept_des A model of Difference
\concept_leg K
\concept_des The key type of a spatial container.
\concept_leg Unit
\concept_des The type unit chosen to express a difference.
\concept_req Unit D::operator()(spatial::dimension_type
dim, const K& x, const K& y) const
\concept_des Returns the difference (or very often, the substraction) of \c
x minus \c y along the dimension \c dim.
\concept_end

If you have build your current container based on \ref spatial::paren_less, \ref
spatial::bracket_less, \ref spatial::iterator_less or \ref
spatial::accessor_less, and if you wish to use your container for nearest
neighbor search, then you might not need to define a new Difference functor: the
library will be able to deduce the right functor, based on the comparators used
in the container.
*/